using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ToDo.Application.Services;
using ToDo.Infrastructure.Persistence;

namespace ToDoApi.Controllers
{
    namespace TiToDoApi.Controllers
    {
        [ApiController]
        [Route("api/[controller]")] // Defines the base route for the controller.
        public class ToDoController : ControllerBase
        {
            private readonly IToDoService _toDoService; //Dependency Injection for toDoService

            public ToDoController(IToDoService toDoService)
            {
                _toDoService = toDoService; //Assign the injected service to private variable.
            }

            [HttpGet] //GET Request to retrieve all todo's
            public async Task<ActionResult<IEnumerable<ToDo.Domain.Entities.ToDo>>> GetAllToDos()
            {
                var todos = await _toDoService.GetAllToDos(); //Calls the service to retrive all todo's
                return Ok(todos); //Return todo's with status 200 OK
            }

            [HttpPost] //POST Request to create new todo
            public async Task<ActionResult<ToDo.Domain.Entities.ToDo>> CreateToDo([FromBody] ToDo.Domain.Entities.ToDo newToDo)
            {
                newToDo.Id = 0; //Ensures the new todo get autogenerated Id (User can only send id=0 or id can be empty
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState); //Return status 400 Bad Request if the model state is invalid.

                }

                await _toDoService.AddToDo(newToDo); //Calls the service to add new todo
                return Ok();
            }
            [HttpGet("{id:int}")] //GET Request to retrieve specific todo by Id
            public async Task<ActionResult<ToDo.Domain.Entities.ToDo>> GetToDoById(int id)
            {
                var todo = await _toDoService.GetToDoById(id); //Call the service to get specific todo by Id
                if (todo == null)
                {
                    return NotFound($"Task with ID {id} not found."); //Returns staus 404 Not Found if todo with that id doesnt exist
                }
                return Ok(todo);
            }
            [HttpGet("incoming")] //GET Request to retrieve incoming todos based on filter 
            public async Task<ActionResult<IEnumerable<ToDo.Domain.Entities.ToDo>>> GetIncomingToDos([FromQuery] string filter = "today")
            {
                DateTime today = DateTime.Today.ToUniversalTime(); //Today's date in UTC, because postgres only supports UTC
                DateTime? startDate = null;
                DateTime? endDate = null;
                switch (filter.ToLower())
                {
                    case "today":
                        startDate = today;
                        endDate = today.AddDays(1).AddTicks(-1); //End of today day
                        break;

                    case "nextday":
                        startDate = today.AddDays(1); //The beggining of tomorrow
                        endDate = today.AddDays(2).AddTicks(-1); //End of tomorrow
                        break;

                    case "currentweek":
                        startDate = today;
                        int daysUntilEndOfWeek = ((int)DayOfWeek.Sunday - (int)today.DayOfWeek + 7) % 7; //In c# Sunday is equal to 0, in Europe Sunday is basically the end of the week, so we need to add 7 to the difference between Sunday and today and modulo of 7 to get the days until the end of the week
                        endDate = today.AddDays(daysUntilEndOfWeek).AddDays(1).AddTicks(-1); //End of week
                        break;

                    default:
                        return BadRequest("Invalid filter. Use 'today', 'nextday', or 'currentweek'."); //Returns status 400 Bad Request with message
                }
                var incomingToDos = await _toDoService.GetIncomingToDos(startDate, endDate);

                return Ok(incomingToDos);
            }
            [HttpDelete("{id:int}")] //DELETE Request to delete specific todo
            public async Task<IActionResult> DeleteToDo(int id)
            {
                var todo = await _toDoService.GetToDoById(id);
                if (todo == null)
                {
                    return NotFound($"Task with ID {id} not found.");
                }

                await _toDoService.DeleteToDoById(id); //Call the service to delete todo
                return Ok();
            }
            [HttpPut("{id:int}")] //PUT Request to update todo
            public async Task<IActionResult> UpdateToDo(int id, [FromBody] ToDo.Domain.Entities.ToDo updatedToDo)
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
                var todo = await _toDoService.GetToDoById(id);
                if (todo == null)
                {
                    return NotFound($"Task with ID {id} not found.");
                }

                await _toDoService.UpdateToDo(updatedToDo); //Call the service to update todo

                return Ok();
            }
            [HttpPatch("{id:int}/done")] //PATCH Request to mark todo as done
            public async Task<IActionResult> MarkToDoAsDone(int id)
            {
                var todo = await _toDoService.GetToDoById(id);
                if (todo == null)
                {
                    return NotFound($"Task with ID {id} not found.");
                }
                await _toDoService.MarkAsDone(id); //Call service to mark todo as done
                return Ok();
            }
            [HttpPatch("{id:int}/percent/{percent:int}")] //PATCH request to change todo's percent of completion
            public async Task<IActionResult> SetToDoPercentComplete(int id, int percent)
            {
                var todo = await _toDoService.GetToDoById(id);
                if (todo == null)
                {
                    return NotFound($"Task with ID {id} not found.");
                }

                await _toDoService.SetToDoPercentComplete(id, percent); //Call the service to set new percent
                return Ok();
            }
        }
    }
}
